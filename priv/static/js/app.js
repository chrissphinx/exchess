// Generated by CoffeeScript 1.8.0
(function() {
  $(function() {
    var $body, $input, $messages, $status, $username, Board, FILES, Piece, Row, Socket, Square, View, messageTemplate, sanitize;
    Socket = new Phoenix.Socket("ws://" + location.host + "/ws");
    $status = $("#status");
    $messages = $("#messages");
    $input = $("#message-input");
    $username = $("#username");
    $body = $("body");
    $(window).resize(function() {
      $messages.height(($body.height() - 120) + "px");
      return $messages.scrollTop($messages[0].scrollHeight);
    }).resize();
    sanitize = function(html) {
      return $("<div/>").text(html).html();
    };
    messageTemplate = function(message) {
      var body, username;
      username = sanitize(message.user || "anonymous");
      body = sanitize(message.body);
      return "<p><a href='#'>[" + username + "]</a>&nbsp; " + body + "</p>";
    };
    Socket.join("rooms", "lobby", {}, function(chan) {
      $input.off("keypress").on("keypress", function(e) {
        if (e.keyCode === 13) {
          chan.send("new:msg", {
            user: $username.val(),
            body: $input.val()
          });
          return $input.val("");
        }
      });
      chan.on("join", function(message) {
        return $status.text("connected");
      });
      chan.on("new:msg", function(message) {
        $messages.append(messageTemplate(message));
        return $messages.scrollTop($messages[0].scrollHeight);
      });
      chan.on("user:entered", function(msg) {
        var username;
        username = sanitize(msg.user || "anonymous");
        return $messages.append("<br/><i>[" + username + " entered]</i>");
      });
      chan.on("board:state", function(state) {
        return View.setState({
          board: state
        });
      });
    });
    FILES = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
    Piece = React.createClass({
      dragStart: function(e) {
        e = e.nativeEvent;
        e.dataTransfer.setData("from", e.target.parentNode.id);
        return e.dataTransfer.setData("piece", e.target.id);
      },
      render: function() {
        var id;
        if (this.props.data !== "_") {
          switch (id = this.props.data) {
            case "K":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wK.svg"
              });
            case "k":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bK.svg"
              });
            case "Q":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wQ.svg"
              });
            case "q":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bQ.svg"
              });
            case "R":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wR.svg"
              });
            case "r":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bR.svg"
              });
            case "B":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wB.svg"
              });
            case "b":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bB.svg"
              });
            case "N":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wN.svg"
              });
            case "n":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bN.svg"
              });
            case "P":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/wP.svg"
              });
            case "p":
              return React.createElement("img", {
                "onDragStart": this.dragStart,
                "draggable": "true",
                "id": id,
                "className": "piece",
                "src": "/images/bP.svg"
              });
          }
        } else {
          return false;
        }
      }
    });
    Square = React.createClass({
      drop: function(e) {
        var to;
        e.preventDefault();
        e = e.nativeEvent;
        if (e.target.className === "piece") {
          to = e.target.parentNode.id;
        } else {
          to = e.target.id;
        }
        return Socket.channels[0].send("board:move", e.dataTransfer.getData("piece") + e.dataTransfer.getData("from") + to);
      },
      dragOver: function(e) {
        return e.preventDefault();
      },
      render: function() {
        var offset;
        offset = this.props.offset;
        return React.createElement("td", {
          "onDrop": this.drop,
          "onDragOver": this.dragOver,
          "id": this.props.tile,
          "className": this.props.color
        }, React.createElement(Piece, {
          "data": this.props.data
        }));
      }
    });
    Row = React.createClass({
      render: function() {
        var color, file, i, row, tile, _i;
        row = [];
        for (i = _i = 0; _i <= 7; i = ++_i) {
          file = FILES[i];
          tile = file + this.props.rank;
          if ((i + this.props.offset) % 2 === 0) {
            color = 'black';
          } else {
            color = 'white';
          }
          row.push(React.createElement(Square, {
            "data": this.props.data[tile],
            "tile": tile,
            "color": color,
            "key": file
          }));
        }
        return React.createElement("tr", null, row);
      }
    });
    Board = React.createClass({
      getInitialState: function() {
        return {
          board: {
            a8: "r",
            b8: "n",
            c8: "b",
            d8: "q",
            e8: "k",
            f8: "b",
            g8: "n",
            h8: "r",
            a7: "p",
            b7: "p",
            c7: "p",
            d7: "p",
            e7: "p",
            f7: "p",
            g7: "p",
            h7: "p",
            a6: "_",
            b6: "_",
            c6: "_",
            d6: "_",
            e6: "_",
            f6: "_",
            g6: "_",
            h6: "_",
            a5: "_",
            b5: "_",
            c5: "_",
            d5: "_",
            e5: "_",
            f5: "_",
            g5: "_",
            h5: "_",
            a4: "_",
            b4: "_",
            c4: "_",
            d4: "_",
            e4: "_",
            f4: "_",
            g4: "_",
            h4: "_",
            a3: "_",
            b3: "_",
            c3: "_",
            d3: "_",
            e3: "_",
            f3: "_",
            g3: "_",
            h3: "_",
            a2: "P",
            b2: "P",
            c2: "P",
            d2: "P",
            e2: "P",
            f2: "P",
            g2: "P",
            h2: "P",
            a1: "R",
            b1: "N",
            c1: "B",
            d1: "Q",
            e1: "K",
            f1: "B",
            g1: "N",
            h1: "R"
          }
        };
      },
      render: function() {
        var board, i, offset, _i;
        board = [];
        for (i = _i = 0; _i <= 7; i = ++_i) {
          if (i % 2 === 0) {
            offset = 0;
          } else {
            offset = 1;
          }
          board.push(React.createElement(Row, {
            "data": this.state.board,
            "rank": 8 - i,
            "offset": offset,
            "key": i
          }));
        }
        return React.createElement("tbody", null, board);
      }
    });
    View = React.render(React.createElement(Board, null), document.getElementById("board"));
  });

}).call(this);
